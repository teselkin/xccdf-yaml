benchmark:
  id: 'sample_xccdf'
  version: 0.1

  title: OpenStack services
  description: |
    Benchmark description

  platform: 'cpe:/o:canonical:ubuntu_linux:16.04'

  # Files that should be copied to output directory in addition
  # to scripts generated from rules below.
  shared-files:
  - functions.sh

  rules:
  - test_bin_true:
      # Define a type of a check.
      # This will be mapped to parser class in xccdf_yaml/parsers.
      type: cmd_exec

      # Define a title of a Rule.
      # You can use YAML's node anchors to use the same string later
      #   http://yaml.org/spec/1.2/spec.html#id2785586
      title: &test_bin_true_title
        "Test /bin/true"

      # Add a description to the Rule.
      # Descriptions are written in markdown
      #   https://daringfireball.net/projects/markdown/syntax
      description: |
        This is a test script

      # You can also add rationale, if you need.
      # This field is plain text only.
      rationale: |
        Some rationale

      # References will appear in HTML result generated by
      # OpenSCAP tool (oscap xccdf eval ...)
      reference:
      # Reference can be:
      # * a simple text string
      - ref1
      # * a link to external resource
      - text: Let me Google it for you
        url: 'http://google.com'
      -
        # Node anchors can be used.
        text: *test_bin_true_title
        # Long URLs can be wrapped.
        url: 'https://www.google.ru/\
          search?q=qwe'

      # cmd_exec parser supports shell scripts (bash) and python scripts.
      # Only one script should be defined. In case there are both 'cmd' will be used.
      # Shell script can be provided with 'cmd' key.
      # Shell script will be added to pre-configured template, and
      # stored in the same directory as XCCDF output file.
      # Any file mentioned in 'shared-files' can be imported from the script.
      cmd: |
        /bin/true

      # Python script can be provided with 'python' key.
      python:
        # Define additional imports here (passed as is to template script)
        imports:
        - 'import logging'
        # Define content of a main() function here.
        # 4 spaces indentation will be added automatically.
        main: |
          print("Hello World")
        # Define content of any other functions here.
        # You can define main() function here as well, in this case
        # do not use 'main' key above.
        # Code block will be used as is, please use correct indentation.
        raw: |
          def main():
              print("Hello World")
